{"/":{"title":"Scala-Stack Garden ü™¥","content":"\n![MasterHead](https://upload.wikimedia.org/wikipedia/commons/3/39/Scala-full-color.svg)\n\n## About Me üè°\n\n- My name is Mahmoud Essam\n\n- I'm a self-taught Software Engineer From Egypt,who has decided to make a carrier shift from Retail Pharmaceutical Chains Industry as a former Area Manager to follow my Passion in Software Programming\n- I Have Learned (Java,Python,Scala) and other software developments fundamentals and prerequisites before embracing\nthe functional programming paradigm of Scala and It's Frameworks , libraries and ecosystem\n\n- I Made This Blog As My Second Brain ‚öñÔ∏è\n\n      - Where I'm demystifying Scala language concepts, data structures and algorithms \n      - Explaining (Akka Ecosystem , Cats/Cats effect ,Kafka)\n      - With hands on coding projects with Explanation\n      - Daily upload Scala Quizzes , Exercises and Coding challenges with Explanation**\n\n---\n\n## Quotes I Follow in Life ‚ö°\n\n   \u003e**One day I was behind the Prophet (peace and blessings of Allah be upon him) [riding on the same mount] and he said, ‚ÄúO young man, I shall teach you   some words [of advice]: Be mindful of Allah and Allah will protect you. Be mindful of Allah and you will find Him in front of you. If you ask, then ask   Allah [alone]; and if you seek help, then seek help from Allah [alone]. And know that if the nation were to gather together to benefit you with     anything, they would not benefit you except with what Allah had already prescribed for you. And if they were to gather together to harm you with anything, they would not harm you except with what Allah had already prescribed against you. The pens have been lifted and the pages have dried.‚Äù It was related by at-Tirmidhi, who said it was a good and sound hadeeth. Another narration, reads: Be mindful of Allah, and you will find Him in front of you. Recognize and acknowledge Allah in times of ease and prosperity, and He will remember you in times of adversity. And know that what has passed you by [and you have failed to attain] was not going to befall you, and what has befallen you was not going to pass you by. And know that victory comes with patience, relief with affliction, and hardship with ease.**\n  \u003e\u003e\u003e **Prophet Mohammed Peace Be Upon Him**\n\n   \u003e**The job is what you do when you are told what to do. The job is showing up at the factory, following instructions, meeting spec, and being managed.Someone can always do your job a little better or faster or cheaper than you can. The job might be difficult, it might require skill, but it's a job.     Your art is what you do when no one can tell you exactly how to do it. Your art is the act of taking personal responsibility, challenging the status     quo, and changing people. I call the process of doing your art 'the work.' It's possible to have a job and do the work, too. In fact, that's how you     become a linchpin. The job is not the work.‚Äù**\n   \u003e\u003e\u003e _**Seth Godin, Linchpin: Are You Indispensable?**_\n\n   \u003e**Don't ever give up.\n    Don't ever give in.\n    Don't ever stop trying.\n    Don't ever sell out.\n    And if you find yourself succumbing to one of the above for a brief moment,\n    pick yourself up, brush yourself off, whisper a prayer, and start where you left off.\n    But never, ever, ever give up.**\n   \u003e\u003e\u003e _**Richelle E. Goodrich,Eena,The  Tempter's Snare**_\n\n   ---\n\n## My Blog Contents   üó∫\n\n- [All Notes](/notes/)\n- [All Tages By Categories](/tags/)\n","lastmodified":"2022-06-28T15:37:37.699754904Z","tags":null},"/notes/coding-challenges-day1":{"title":"Coding Challenges Day One","content":"\n![MasterHead](https://st.depositphotos.com/1152339/2258/i/600/depositphotos_22588457-stock-photo-technology-concept-hex-code-digital.jpg)\n\n## [GitHub Source Code]()\n\n## Problem One (Top K Frequent Elements)\n\n  ![The Probem](https://images2.arabicprogrammer.com/409/ff/ff8e52dc7544efb1d48ef4f711653a49.png)\n\n  ![The Problem 2](https://img-blog.csdnimg.cn/20200104164231783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09yaWVudGxpdTk2,size_16,color_FFFFFF,t_70)\n\n  ### Understanding the problem\n\n  1-First It's not an empty array sow we won't bother ourselves about (Options ,Some,Nil)\n  2-Second Array in Scala in **Mutable** **indexed** **homogenous** type of collection,so what benefits an array brings  as a data structure _the elements in array can be accessed randomly by using the index number. Arrays allocate memory in contiguous memory locations for all its elements. Hence there is no chance of extra memory being allocated in case of arrays. This avoids memory overflow or shortage of memory in arrays so accessing an element is very easy For any reason a user wishes to store multiple values of similar type then the Array can be used and utilized efficiently which is the case in this example_\n  3- Algorithm time complexity **Must Be** O(nlog(n))therefore, there must be something related to binary structures or divide \u0026 conquer.\n  If you see this image Below you will find out that we are Dealing with some kind of **search** and/or **sorting By**\n  ![image1](https://qph.fs.quoracdn.net/main-qimg-f8c3620e14dbaa97e8a35d51545f9da7.webp)\n  4- Looking at given example it-self we have Two parameters `nums` Array of Int and `k` an Int is to be mapped or matched against `nums` if `k` equal value to most frequent elements or second most frequent element it's added to  `nums` as a second element else it's discarded also take in consideration that the elements inside `nums` may have negative numbers\n  **without further ado** lest see the solution below and I will dissect it piece by piece with detailed explanation below the solution  \n\n  ### The Solution Of The Problem\n\n  ```scala\n    def solve(nums: Array[Int], k: Int): Array[Int] =\n       nums.groupBy(identity)\n       .view.mapValues(_.length)\n       .toArray.sortBy(_._2)\n       .map(_._1).reverse.take(k)\n  ```\n\n  ### Explaining the Solution\n\n  1- `groupBy` For grouping elements in a Scala collection by a provided key\n  which has the following signature for an Iterable:\n\n  ```scala\n    // Method groupBy\n    def groupBy[K](f: (A) =\u003e K): immutable.Map[K, Iterable[A]]\n  ```\n\n  It returns an immutable Map of elements each consisting of a key and a collection of values of the original type. To process this collection of values in the resulting Map, Scala provides a method `view.mapValues` with the below signature:\n\n  ```scala\n    // Method mapValues\n    def mapValues[W](f: (V) =\u003e W): Map[K, W]\n  ```\n\n  This `groupBy/view.mapValues` combo proves to be handy for processing the values of the Map generated from the grouping.\n  \n  2- _What `identity` Means_ identity is a function By using identity, which is a \"nice\" way to say `x =\u003e x` we get a map where each Int gets separated in map, Like following:\n\n  ```scala\n    Map(1-\u003eArray(1,1,1),3-\u003eArray(3),2-\u003eArray(2,2))\n  ```\n\n  And here the method Signature:\n\n  ```scala\n    def identity[A](x : A) : A = { /* compiled code */ }\n  ```\n\n  3- What `_.length` Means in scala Placeholder syntax. Scala allows the use of underscores (denoted as ‚Äò_‚Äô) to be used as placeholders for one or more parameters. we can consider the underscore to something that needs to be filled in with a value. However, each parameter must appear only one time within the function literal.\n  Note: Internally, the underscore is expanded into a literal for a function that takes input as 1 parameter and then checks the condition which is mentioned. The same rule applies for more than 1 parameter. Multiple underscores means multiple parameters and not the use of same parameter repeatedly. Hence, this syntax is used when you want to take 1 or more parameters only once\n  **In Our Case `_` here a short hand for single parameter anonymous function (x=\u003ex)**\n  **_Summarizing The Process Till now we mapped the `nums` Array as key value pairs of it's given element as key then we mapped the values of the map to their given length_**\n  4-`toArray`  is used to convert the given **sortedMap as Mentioned Above** to an array. It stores the elements in a 2-D array in which each row consists of the key and value of the map.\n  I won't go in details about the wrapping and implicits of toArray method it would be out of scope of this Article but follow my blog I'm Willing to explain all Scala concepts in the upcoming Articles\n  5-`sortBy(_._2)`\n  here is the method Signature:\n\n  ```scala\n   sortBy[B](f : scala.Function1[A, B])(implicit ord : scala.math.Ordering[B]) : scala.Array[A] = { /* compiled code */ }\n  ```\n\n  it takes two function parameters and return a sorted array **in our example we tell the function to take whatever\n  and sort the second element of 2_D array\n  according to natural ordering**\n\n  6- `.map(_._1)` now after sorting it's time to transform this array according to  first element of 2-D Array\n  7- `reverse.take(k)` before explaining why `reverse` method let me tell you about `take()` method,, the take() method is utilized to return a stack consisting of the first ‚Äòn‚Äô elements of the stack so it will return the head of the array which is most likely be the most frequent element in the array we done computing on so I reversed the list to let the take method return from the tail which is likely be the second most frequent element in the array\n\n  **_All Thanks To [Eichorn](https://www.reddit.com/user/Eichhorn/) from scala Reddit community for his help for optimizing this solution the most way possible_**\n\n## Problem Two  Contains Duplicates\n  ![problem3](https://kkminseok.github.io/assets/img/sample/leetcode/217/input.JPG)\n\n  ### UnderStanding The Problem\n\n  true if there is duplicates false if no duplicates  simple and easy return value of function boolean \n\n  ### The Solution Of The Problem\n\n  ```scala\n     nums.toSet.size != nums.length\n  ```\n\n  ## Explaining The Solution\n\n  I tried sorting and recursion but I Wasn't As fast As the Solution Above \n  I was tempted to use imperative Programming Style using `for loop` with `var` and Mutable Collection for faster Times but I will Stick with functional programming way the idea here is compare between the `Int` of  two types of collections as we know that `Set` Collection doesn't allow/add duplicate elements so i use it to compare it with the length of the `nums` array\n\n**_Thanks For Visiting And Reading My Articles Stay Tuned To Upcoming Articles_**    \n","lastmodified":"2022-06-28T15:37:37.699754904Z","tags":null},"/notes/scala-programming-part-one":{"title":"Scala programming concept part one","content":"![MasterHead](https://besthqwallpapers.com/Uploads/20-2-2020/122281/thumb2-scala-glitter-logo-programming-language-grid-metal-background-scala-creative.jpg)\n\n## [GitHub Source Code](https://github.com/mahmoudessam5588/scala-programming-part-one)\n\n## Brief Introduction To Scala\n\n- _Scala stands for ‚Äúscalable language.‚Äù The language is so named\nbecause it was designed to grow with the demands of its users. You can apply\nScala to a wide range of programming tasks, from writing small scripts to\nbuilding large systems._\n\n- _Scala is a blend of object-oriented and functional programming concepts in a         statically  typed language.\nThe fusion of object-oriented and functional programming shows up \nin many different aspects of Scala;\nit is probably more pervasive than in any other widely used language. The\ntwo programming styles have complementary strengths when it comes to\nscalability. Scala‚Äôs functional programming constructs make it easy to build\ninteresting things quickly from simple parts. Its object-oriented constructs\nmake it easy to structure larger systems and adapt them to new demands.\nThe combination of both styles in Scala makes it possible to express new\nkinds of programming patterns and component abstractions. It also leads to\na legible and concise programming style._\n\n\u003e _**Source : Scala Programming 5th Edition Book**_\n\u003e\u003e\u003e **By Martin Odersky**\n\n  ---\n\n\n\n## Scala Variables\n\n- Scala Has Two Variables `var` And `val`\n\n- 'val' is immutable can't be reassigned to new value example `val msg = \"Hello, world!\"`\n\n- `var` is the opposite it can be reassigned to new value through it's lifetime as shown Below\n\n  ```scala\n  var greeting = \"Hello, World!\"\n  greeting = \"Hello My Name Is Mahmoud\"\n  ```\n\n- Scala is statically Typed but compiler can infer the Types  \n\n  ```scala\n  val aString: String = \"hello\"\n  val aBoolean: Boolean = false\n  val aChar: Char = 'a'\n  val aShort: Short = 4613\n  val aLong: Long = 5273985273895237L\n  val aFloat: Float = 2.0f\n  //or without types\n  val aString = \"hello\"\n  val anotherString = \"goodbye\"\n  val aBoolean = false\n  val aChar = 'a'\n  val aShort = 4613\n  val aLong = 5273985273895237L\n  val aFloat = 2.0f\n\n  ```\n\n  ---\n\n## Scala Function Definition And Syntax\n\n  ```scala\n  def biggerThan (x:Int , y:Int):Int = \n  if x \u003e y then x else y\n  ```\n\n- `def` == defining method , `biggerThan` == function name , `(x:Int,y:Int)` == parameter list in parentheses ,`:Int` == function return type scala function **must have a return type** , `if x \u003e y the x else Y` the body of the function\n\n  ```scala\n  def greet():Unit = println(\"Hello, world!\")\n  ```\n\n  def greet(): Unit. ‚Äúgreet‚Äù is, of course, the name of the function. The\n  empty parentheses indicate the function takes no parameters. And Unit is\n  greet‚Äôs result type. A result type of Unit indicates the function returns no\n  interesting value. Scala‚Äôs Unit type is similar to Java‚Äôs void type; in fact,\n  every void-returning method in Java is mapped to a Unit-returning method\n  in Scala. Methods with the result type of Unit, therefore, are only executed\n  for their side effects.\n\n- _**so What Are Side Effects**_??\n  A function has a side effect if it\ndoes something other than simply return a result, for example:\n\n  - Modifying a variable\n  - Modifying a data structure in place\n  - Setting a field on an object\n  - Throwing an exception or halting with an error\n  - Printing to the console or reading user input\n  - Reading from or writing to a file\n  - Drawing on the screen\n\n  \u003e _**Source Functional Programming in Scala Book (AKA The Red Book)**_\n  \u003e\u003e  **By Paul Chiusano and Runar Bjarnason**\n\n \n  - _we Will discuss later pure functional programming in depth in the upcoming articles_\n\n- _lets discuss a little exercise to gave you a taste of functional programming in scala **this might be a little advanced for some but don't worry all concepts mentioned below will be explained later in depth in the upcoming lectures**_\n\n- **_consider you have a collection of numbers you don't know how large or small it's and you only want to filter the even numbers_** before jumping into solution let's think how to implement this example with optimal performance and minimal use of resources , now in functional programming we tell the (compiler) what to do unlike in imperative style of programming we tell the (compiler) step by step how to run the code and get the desired result so given what i have said above we will not use `var` or normal `for` or `for each` loops instead we will use **for Comprehension**\n\n  - **What is For Comprehension ??** has a `for`  **Enumeration**  over a given provided `\u003c-` in **Collection** with `yield` keyword for each binding generated by the enumerators and returns a sequence of these values.\n  \n  - **Next What Type Of Collection To Choose ??** it's obvious as we don't know the size of the collection and we are using a Immutable Collection so for best given case to this example we will use a type of collection `LazyList` which is a linked list whose elements are lazily evaluate a `LazyList` both the head and the tail are lazy , So **What IS `lazy` MEANS IN FIRST PLACE ??** in programming language theory, lazy evaluation, or call-by-need, is an evaluation strategy which delays the evaluation of an expression until its value is needed.\n\n  - let me show you my solution below and see how expressive Scala is,as if it's a natural language\n\n  ```scala\n  object ScalaPartOne:\n    def main(args: Array[String]):Unit=\n      def aCollection(evenNum:LazyList[Int]):LazyList[Int]=\n      for x \u003c- evenNum if x % 2 == 0 yield x\n    aCollection(LazyList(2,3,4,6,7)) foreach println\n  ```\n\n  ```console\n    2\n    4\n    6\n  Process finished with exit code 0\n  ```\n\n  - Another Solution Less Optimized For Large Collections but Shorter Syntax\n\n  ```scala\n    val numbers: IndexedSeq[Int] = for i:Int \u003c- 1 to 10 filter(_%2==0) yield i\n    numbers foreach println\n    println(numbers toList)\n  ```\n\n  ```console\n    2\n    4\n    6\n    8\n    10\n    List(2, 4, 6, 8, 10)\n  ```\n\n  - _**There is Also Recursion And Tail Recursion Will Be Explained In Detail In The Upcoming Lectures**_.\n\n- _Functions in Scala_ is either **Called By Name** Or **Called By Value** according to given parameter\n\n  - _Incase Called By value_  it's normal parameter with given type\n  _Example:_\n\n  ```scala\n    def calledByValue(x: Long): Unit = \n      println(\"by value: \" + x)\n      println(\"by value: \" + x)\n    calledByValue(1257387745764245L) \n  ```\n\n  - _Incase Called By Name_ the parameter inside the function is another high order function (discussed later) returns a given type\n  _Example_:\n\n  ```scala\n    def calledByName(x: =\u003e Long): Unit =\n      println(\"by name: \" + x)\n      println(\"by name: \" + x)\n    calledByName(System.nanoTime())  \n  ```\n\n- _Functions in Scala_ can have **default parameter or parameters values hat can be used to allow a caller to omit those parameters**\n  \n  - _Example:_\n\n  ```scala\n    def log(message: String, level: String = \"INFO\") = println(s\"$level: $message\")\n    log(\"System starting\")  // prints INFO: System starting\n    log(\"User not found\", \"WARNING\")  // prints WARNING: User not found\n  ```\n\n  The parameter `level` has a default value so it is optional. On the last line, the argument `\"WARNING\"` overrides the default argument `\"INFO\"`. Where you might do overloaded methods in Java, you can use methods with optional parameters to achieve the same effect. However, if the caller omits an argument, any following arguments must be named.\n  \n  ---\n\n## Scala‚Äôs Expressions, Statements, and Conditionals\n\n- _**Expressions**_ indicates a unit of code that returns a value after it has been executed. One or more lines of code can be considered an expression if they are collected together,this is known as as _**expression block**_\n  - Expressions provide a foundation for functional programming because they make it possible to return data instead of modifying existing data (such as a variable). This enables the use of immutable data, a key functional programming concept where new data is stored in new values instead of in existing variables. Functions, of course, can be used to return new data, but they are in a way just another type of expression.\n\n    When all of your code can be organized (or conceptualized) into a collection of one or more hierarchical expressions that return values using immutable data will be straightforward. The return values of expressions will be passed to other expressions or stored into values. As you migrate from using variables, your functions and expressions will have fewer side effects. In other words, they will purely act on the input you give them without affecting any data other than their return value. This is one of the main goals and benefits of functional programming..\n  \n    \u003e_**Source: Learning Scala Book**_\n    \u003e\u003e _**OREILLY**_\n- _**Statements**_\nA statement is just an expression that doesn‚Äôt return a value. Statements have a return type of Unit, the type that indicates the lack of a value. Some common statements used in Scala programming include calls to println() and value and variable definitions.\n\n- **_Examples_**\n  \n  - `val x = \"hello\"` This is an expression\n\n  - All operators are functional expressions in Scala like (+ - * / \u0026)\n  \n  ```scala\n    val x = 1 + 2 // EXPRESSION\n    println(x) // 3\n    println(1 + 2 * 3) // 7 multiplication first then addition\n    println((1+2)*3) //9\n    println(1 == x) //false\n     println(!(1 == x)) //true\n     //var with side effects\n    var aVariable = 2\n    aVariable += 3 // also works with -= *= /= ..... side effects\n    println(aVariable)\n    //if expression\n    val aCondition = true\n    println(if aCondition then 5 else 3)\n    //expression block\n    val aCodeBlock = \n      val y = 2\n      val z = y + 1\n      if z \u003e 2 then \"hello\" else \"goodbye\"\n  ```  \n\n  ---\n\n## String Operations In Scala\n\n- String are immutable which means a constant and cannot be changed once created.\n\n- I recommend you to go and Read [geeksforgeekspost](https://www.geeksforgeeks.org/scala-string-methods-with-examples/) they almost cover all `String` operation methods so check them out\n  \n- But I will discuss here String interpolators types\n\n  - s-interpolators Prepending `s` to any string literal allows the usage of variables directly in the string\n  Example:\n\n  ```scala\n    val name = \"James\"\n    println(s\"Hello, $name\")  // Hello,James\n  ```\n  \n  - f-Interpolator\n  Prepending `f` to any string literal allows the creation of simple formatted strings, The f interpolator is typesafe. If you try to pass a format string that only works for integers but pass a double, the compiler will issue an error\n  Example:\n\n  ```scala\n    val height = 1.9d\n    val names = \"James\"\n    println(f\"$names%s is $height%2.2f meters tall\")  // James is 1.90 meters tall\n  ``` \n\n  - raw-Interpolator\n     `raw` interpolator is similar to the s interpolator except that it performs no escaping of literals within the string. Here‚Äôs an example processed string,\n     The raw interpolator is useful when you want to avoid having expressions like `\\n` turn into a return character.\n     Example:\n\n     ```scala\n      println(raw\"This is a \\n newline\")\n      val escaped = \"This is a \\n newline\"\n      println(raw\"$escaped\")\n     ```\n\n  - for more Information about String Interpolators and their advanced usage visit this [Scala-Docs](https://docs.scala-lang.org/overviews/core/string-interpolation.html) link\n\n\n\n**Thanks A lot For Visiting My Blog And Reading My Article See You In Next Article** \n\n","lastmodified":"2022-06-28T15:37:37.699754904Z","tags":null}}